Python O(n+m) time complexity - Easy to understand

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        nums = nums1.copy()
        i=j=k=0
        while i<m and j<n:
            if nums[i] < nums2[j]:
                nums1[k] = nums[i]
                i+=1
            else :
                nums1[k] = nums2[j]
                j+=1
            k+=1
        while i<m:
            nums1[k] = nums[i]
            i+=1
            k+=1
        while j<n:
            nums1[k] = nums2[j]
            j+=1
            k+=1

Python O((n+m)log(n+m)) time complexity - Easy to understand

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        
        # remove zeros from nums1
        
        for value in range(n):
            if 0 in nums1:
                nums1.remove(0)
           
        # append nums2 items to the nums1 list
        for value in nums2:
            nums1.append(value)
        
        # sort in low to high order/non decreasing order
        nums1 = nums1.sort() 

Fastest 1 liner python

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        nums1[:] = sorted(nums1[:m].copy() + nums2.copy())

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        nums1[:] = sorted(nums1[:m] + nums2[:n])

Good explanation and all-you-need-to-know about slicing:
https://stackoverflow.com/questions/509211/understanding-slicing
